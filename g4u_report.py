import pandas as pd
import requests
import gspread
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
SOURCE_SPREADSHEET = '–æ—Ç—á–µ—Ç_–∑–∞–∫–∞–∑—ã'
SOURCE_SHEET = '–í—ã—Ä—É—á–∫–∞'
TARGET_SPREADSHEET = 'profit'
TARGET_SHEET = '–õ–∏—Å—Ç1'
SERVICE_FILE = 'g4u_api.json'

CURRENCY_MARKUP = 1.05  # –Ω–∞—Ü–µ–Ω–∫–∞ 5%

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_FILE, scope)
client = gspread.authorize(creds)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
source_ws = client.open(SOURCE_SPREADSHEET).worksheet(SOURCE_SHEET)
data = source_ws.get_all_records()
df = pd.DataFrame(data)

# === –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'], format='%d.%m.%y', errors='coerce')

# === –ö—ç—à –∫—É—Ä—Å–æ–≤
exchange_cache = {}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¶–ë –†–§ —Å –æ—Ç–∫–∞—Ç–æ–º –Ω–∞ 7 –¥–Ω–µ–π
def get_cbr_rate(currency_code: str, date: datetime) -> float:
    for i in range(7):
        check_date = date - timedelta(days=i)
        date_str = check_date.strftime("%d/%m/%Y")
        if (currency_code, date_str) in exchange_cache:
            return exchange_cache[(currency_code, date_str)]
        
        url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={date_str}"
        try:
            response = requests.get(url, timeout=10)
            root = ET.fromstring(response.content)
            for valute in root.findall('Valute'):
                char_code = valute.find('CharCode').text
                if char_code == currency_code:
                    nominal = int(valute.find('Nominal').text)
                    value = float(valute.find('Value').text.replace(',', '.'))
                    rate = (value / nominal) * CURRENCY_MARKUP
                    exchange_cache[(currency_code, date_str)] = rate
                    return rate
        except:
            continue
    return 0

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
def parse_cost_with_date(row):
    val = str(row.get("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, TL", "")).strip().lower().replace(",", ".")
    date = row["–î–∞—Ç–∞"]
    if pd.isnull(date) or not val or val == "0":
        return 0
    try:
        if "usdt" in val or "$" in val:
            amount = float(val.replace("usdt", "").replace("$", "").strip())
            rate = get_cbr_rate("USD", date)
        else:
            amount = float(val)
            rate = get_cbr_rate("TRY", date)
        return round(amount * rate, 2)
    except:
        return 0

# === –û—á–∏—Å—Ç–∫–∞ –≤—ã—Ä—É—á–∫–∏
def clean_revenue(val):
    try:
        if isinstance(val, str):
            return float(val.replace("–ê–≤–∏—Ç–æ", "").strip())
        return float(val)
    except:
        return 0

# === –†–∞—Å—á—ë—Ç—ã
df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ä—É–±"] = df.apply(parse_cost_with_date, axis=1)
df["–í—ã—Ä—É—á–∫–∞, —Ä—É–±"] = df["–í—ã—Ä—É—á–∫–∞, —Ä—É–±"].apply(clean_revenue)
df["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"] = df["–í—ã—Ä—É—á–∫–∞, —Ä—É–±"] - df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ä—É–±"]

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
df["–î–∞—Ç–∞"] = df["–î–∞—Ç–∞"].dt.strftime("%Y-%m-%d")
df = df.fillna("")

# === –î—É–±–ª–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —á—Ç–æ–±—ã –¥–∞–ª–µ–µ —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑—Ä–µ–∑–µ –¥–Ω—è/–º–µ—Å—è—Ü–∞
df_2 = (
    df.dropna(subset=["–ü–ª–æ—â–∞–¥–∫–∞"])
      .query("–ü–ª–æ—â–∞–¥–∫–∞ != ''")
      .groupby(["–î–∞—Ç–∞", "–ü–ª–æ—â–∞–¥–∫–∞"])["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"]
      .sum()
      .reset_index()
      .sort_values(by=["–î–∞—Ç–∞", "–ü–ª–æ—â–∞–¥–∫–∞"])
)

df_2["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"] = df_2["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].round(2)

# === –ó–∞–ø–∏—Å—å df_2 –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
sheet_name = "–ü—Ä–∏–±—ã–ª—å –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º"

# –£–¥–∞–ª–∏–º –ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
try:
    client.open(TARGET_SPREADSHEET).del_worksheet(
        client.open(TARGET_SPREADSHEET).worksheet(sheet_name)
    )
except:
    pass

# –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—à–µ–º —Ç—É–¥–∞ df_2
ws_2 = client.open(TARGET_SPREADSHEET).add_worksheet(title=sheet_name, rows=100, cols=10)
ws_2.update([df_2.columns.values.tolist()] + df_2.values.tolist())

# === –ó–∞–ø–∏—Å—å –≤ Google Sheets
target_ws = client.open(TARGET_SPREADSHEET).worksheet(TARGET_SHEET)
target_ws.clear()
target_ws.update([df.columns.values.tolist()] + df.values.tolist())

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ Telegram

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
df_2["–î–∞—Ç–∞"] = pd.to_datetime(df_2["–î–∞—Ç–∞"])
last_day = df_2["–î–∞—Ç–∞"].max()
df_last = df_2[df_2["–î–∞—Ç–∞"] == last_day]

# === –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç—á—ë—Ç–∞
lines = [f"<b>üìä –û—Ç—á—ë—Ç –∑–∞ {last_day.strftime('%d.%m.%Y')}:</b>"]
for _, row in df_last.iterrows():
    platform = row["–ü–ª–æ—â–∞–¥–∫–∞"]
    value = row["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"]
    label = "–í—ã—Ä—É—á–∫–∞ –ê–≤–∏—Ç–æ" if "avito" in platform.lower() else "–ü—Ä–∏–±—ã–ª—å Telegram"
    lines.append(f"‚Äî {label}: {value:,.2f} ‚ÇΩ")

msg = "\n".join(lines)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_CHAT_ID = "1355514400"  # üîÅ –º–æ–π –∞–π–¥–∏
SEND_TELEGRAM = True  #  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def send_profit_to_telegram(bot_token, chat_id, message):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        r = requests.post(url, data=payload)
        r.raise_for_status()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
if SEND_TELEGRAM:
    send_profit_to_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, msg)
else:
    print("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞ (SEND_TELEGRAM = False)")